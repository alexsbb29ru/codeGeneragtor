/* eslint-disable @typescript-eslint/no-empty-function */

import {
    app,
    BrowserWindow,
    ipcMain,
    IpcMainEvent,
    shell,
    globalShortcut,
    nativeTheme,
} from "electron"

import path from "path"

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
    app.quit()
}

const devMode = "develop"
const releaseMode = "release"
const appMode: string = devMode

const createWindow = (): void => {
    // Create the browser window.
    const win = new BrowserWindow({
        width: 700,
        height: 380,
        minHeight: 390,
        minWidth: 700,
        icon: __dirname + "/images/iconMax.png",
        webPreferences: {
            contextIsolation: false,
            nodeIntegration: true,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
        autoHideMenuBar: true,
        frame: false,
        // show: false,
    })

    // nativeTheme.themeSource = "dark"

    if (appMode === releaseMode) {
        globalShortcut.register("CommandOrControl+R", () => {})
        globalShortcut.register("CommandOrControl+Shift+I", () => {})
    }

    // and load the index.html of the app.
    win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

    // Open the DevTools.
    win.webContents.openDevTools()
    win.once("ready-to-show", win.show)

    //! -------------- Settings modal -----------------------

    //! ------------------ History modal -------------------

    //! ----------------- About modal -----------------------
    ipcMain.handle("window:getAppVersion", () => {
        const version = `Версия: ${app.getVersion()}`
        return version
    })
    //Open URL
    ipcMain.on("url:open-url", (_event: IpcMainEvent, stringURL: string) => {
        shell.openExternal(stringURL)
    })

    //! --------------- Multi generate modal ------------------
    //Open multi code generate page
    ipcMain.on(
        "window:init-multi-gen",
        (_event: IpcMainEvent, downloadFolderPath: string) => {
            if (win)
                win.webContents.send(
                    "window:init-multi-gen",
                    downloadFolderPath
                )
        }
    )
    ipcMain.on("window:open-multigen-modal", (_event: IpcMainEvent, args) => {
        if (win) win.webContents.send("window:open-multigen-modal", args)
    })
    //Generate all codes
    ipcMain.on("window:generate-codes", (_event: IpcMainEvent, args: any) => {
        if (win) win.webContents.send("window:generate-codes", args)
    })

    //! --------------- Title bar ------------------

    ipcMain.on("minimize", () => {
        if (win) win.minimize()
    })

    ipcMain.on("maximize", () => {
        if (win) win.maximize()
        toggleMaxRestoreButtons()
    })

    ipcMain.on("unmaximize", () => {
        if (win) win.restore()
        toggleMaxRestoreButtons()
    })

    ipcMain.on("close", () => {
        if (win) win.close()
    })

    toggleMaxRestoreButtons()

    if (win) {
        win.on("maximize", () => {
            toggleMaxRestoreButtons()
        })

        win.on("unmaximize", () => {
            toggleMaxRestoreButtons()
        })
    }

    function toggleMaxRestoreButtons() {
        if (!win) return

        if (win.isMaximized()) {
            win.webContents.send("isMaximized")
        } else {
            win.webContents.send("isRestored")
        }
    }

    //!----------------- Theme color --------------
    ipcMain.handle("dark-mode:on", () => {
        nativeTheme.themeSource = "dark"
    })

    ipcMain.handle("dark-mode:off", () => {
        nativeTheme.themeSource = "light"
    })

    // ------------------ Other --------------------
    ipcMain.handle("getDownloadsPath", () => {
        return app.getPath("downloads")
    })

    ipcMain.handle("getAppPath", () => {
        return app.getAppPath()
    })

    ipcMain.handle("getDocumentsPath", () => {
        return app.getPath("documents")
    })

    ipcMain.on("get-preload-path", (e) => {
        e.returnValue = MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit()
    }
})

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow()
    }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
